#include <string.h>
#include <stdio.h>
#include<ctype.h>
#define SIZE 15
#define CHARSIZE 2

void initRecordBorard(void);
void recordtoDisplayArray(int wf);
void displayBoard(void);
int judge(int x,int y);
int win(int,int);
int mystrcm(int a[],int flag);
void getchess(int *m,int *n,int aRecordBoard[15][15]);
void xscore(int x,int y,int score[15][15]);
void yscore(int x,int y,int score[15][15]);
void upscore(int x,int y,int score[15][15]);
void downscore(int x,int y,int score[15][15]);
int add(int a[]);
int dda(int a[]);
void score_grade10(int b[]);
void score_grade11(int b[]);
void score_grade12(int b[]);
void score_grade13(int b[]);
void score_grade20(int b[]);
void score_grade21(int b[]);
void score_grade22(int b[]);
void score_grade23(int b[]);
void score_grade24(int b[]);
void score_grade25(int b[]);
void score_grade26(int b[]);
void score_grade30(int b[]);
void score_grade31(int b[]);
void score_grade40(int b[]);
void score_grade41(int b[]);
void score_grade42(int b[]);
void score_grade43(int b[]);
void score_grade44(int b[]);
void score_grade45(int b[]);
void score_grade46(int b[]);
void score_grade50(int b[]);
void score_grade51(int b[]);
void score_grade52(int b[]);

char aInitDisplayBoardArray[SIZE+1][SIZE*CHARSIZE+3] =
{
		"15┏┯┯┯┯┯┯┯┯┯┯┯┯┯┓",
		"14┠┼┼┼┼┼┼┼┼┼┼┼┼┼┨",
		"13┠┼┼┼┼┼┼┼┼┼┼┼┼┼┨",
		"12┠┼┼┼┼┼┼┼┼┼┼┼┼┼┨",
		"11┠┼┼┼┼┼┼┼┼┼┼┼┼┼┨",
		"10┠┼┼┼┼┼┼┼┼┼┼┼┼┼┨",
		" 9┠┼┼┼┼┼┼┼┼┼┼┼┼┼┨",
		" 8┠┼┼┼┼┼┼┼┼┼┼┼┼┼┨",
		" 7┠┼┼┼┼┼┼┼┼┼┼┼┼┼┨",
		" 6┠┼┼┼┼┼┼┼┼┼┼┼┼┼┨",
		" 5┠┼┼┼┼┼┼┼┼┼┼┼┼┼┨",
		" 4┠┼┼┼┼┼┼┼┼┼┼┼┼┼┨",
		" 3┠┼┼┼┼┼┼┼┼┼┼┼┼┼┨",
		" 2┠┼┼┼┼┼┼┼┼┼┼┼┼┼┨",
		" 1┗┷┷┷┷┷┷┷┷┷┷┷┷┷┛",
		"   A B C D E F G H I J K L M N O"
};
char aDisplayBoardArray[SIZE+1][SIZE*CHARSIZE+3];
int aRecordBoard[SIZE][SIZE];
char play1Pic[]="●";
char play2Pic[]="◎";
char *type1[4]={"01000","00010","10000","00001"};
char *type2[7]={"11000","01100","00110","00011","01010","10010","01001"};
char *type3[2]={"02000","00020"};
char *type4[7]={"22000","02200","00220","00022","02020","20020","02002"};
char *type5[3]={"11100","00111"};
void (*score1[])()={&score_grade10,&score_grade11,&score_grade12,&score_grade13};
void (*score2[])()={&score_grade20,&score_grade21,&score_grade22,&score_grade23,&score_grade24,&score_grade25,&score_grade26};
void (*score3[])()={&score_grade30,&score_grade31};
void (*score4[])()={&score_grade40,&score_grade41,&score_grade42,&score_grade43,&score_grade44,&score_grade45,&score_grade46};
void (*score5[])()={&score_grade50,&score_grade51};
void myinput(int *x,int *y);
void main(){
    int i,j,x,y,cas=0,pd=0,m,n;
    int m_o_c,wf;
    printf("\n人人模式请输入1，人机模式请输入2: ");
    scanf("%d",&m_o_c);
    printf("\n");
    initRecordBorard();
    if(m_o_c==1)
    do{
	do{
                printf("请玩家1下棋: ");
                myinput(&x,&y);
        }while(judge(x,y)==0);
        if(judge(x,y)==2)
	    break;
        pd++;
        aRecordBoard[x][y]=2;
        recordtoDisplayArray(wf);
        displayBoard();
        if(win(x,y)==1){
	    printf("玩家1赢！\n\n");
	    cas=1;break;}
        if(pd==225)
	    {printf("平局\n\n");
	    cas=1;break;}
	else
	  do{
                printf("请玩家2下棋: ");
                myinput(&x,&y);
          }while(judge(x,y)==0);
	if(judge(x,y)==2)
	    break;
        pd++;
	aRecordBoard[x][y]=1;
        recordtoDisplayArray(wf);
        displayBoard();
        if(win(x,y)==1){
	    printf("玩家2赢！\n\n");
	    cas=1;break;}
        if(pd==225)
	    {printf("平局\n\n");
	    cas=1;break;}
    }while(cas==0);
    if(m_o_c==2){
	printf("人先手请输入1，机先手请输入2： ");
        scanf("%d",&wf);
	printf("\n");}
    if(wf==1)
    do{
        do{
                printf("请下棋: ");
                myinput(&x,&y);
        }while(judge(x,y)==0);
        if(judge(x,y)==2)
	    break;
        pd++;
        aRecordBoard[x][y]=2;
        recordtoDisplayArray(wf);
        displayBoard();
        if(win(x,y)==1){
	printf("恭喜，你赢了！\n\n");
	cas=1;break;}
        if(pd==225)
	    {printf("平局\n\n");
	    cas=1;break;}
        else
       	    getchess(&m,&n,&aRecordBoard[0]);
        pd++;
        recordtoDisplayArray(wf);
        displayBoard();
        printf("电脑棋子: %d %c\n",15-m,'A'+n);
        if(win(m,n)==1)
	    {printf("很遗憾，你输了！\n\n");
	    cas=1;break;}
        if(pd==225)
	    {printf("平局\n\n");
	    cas=1;break;}
    }while(cas==0);
    if(wf==2){
	aRecordBoard[7][7]=1;
	recordtoDisplayArray(wf);
        displayBoard();
	do{
	    do{
                printf("请下棋: ");
                myinput(&x,&y);
            }while(judge(x,y)==0);
            if(judge(x,y)==2)
	        break;
            pd++;
            aRecordBoard[x][y]=2;
            recordtoDisplayArray(wf);
            displayBoard();
            if(win(x,y)==1){
	        printf("恭喜，你赢了！\n\n");
		cas=1;break;}
            if(pd==225)
	        {printf("平局\n\n");
	        cas=1;break;}
            else
      	        getchess(&m,&n,&aRecordBoard[0]);
            pd++;
            recordtoDisplayArray(wf);
            displayBoard();
            printf("电脑棋子: %d %c\n",15-m,'A'+n);
            if(win(m,n)==1)
	        {printf("很遗憾，你输了！\n\n");
	        cas=1;break;}
            if(pd==225)
	        {printf("平局\n\n");
	    cas=1;break;}
        }while(cas==0);
    }
}

void myinput(int *x,int *y){
    int i;
    *x=-1;
    *y=-1;
    char a[10],c;
    while((a[0]=getchar())=='\n')
	;
    for(i=1;(a[i]=getchar())!='\n';i++)
	;
    if(isdigit(a[0])){
	*x=15-a[0]+'0';
	if(isdigit(a[1])){
	    *x=15-(a[0]-'0')*10-a[1]+'0';
	    if(isalpha(a[2])){
		*y=(a[2]>='a'&&a[2]<='z')?(a[2]-'a'):(a[2]-'A');
		if(a[3]!='\n')
		    *x=-1;}
	    else if(a[2]==','||a[2]==' ')
		if(isalpha(a[3])){
		    *y=(a[3]>='a'&&a[3]<='z')?(a[3]-'a'):(a[3]-'A');
		    if(a[4]!='\n')
		    *x=-1;}
	}
	else if(a[1]==','||a[1]==' '){
	    if(isalpha(a[2])){
		*y=(a[2]>='a'&&a[2]<='z')?(a[2]-'a'):(a[2]-'A');
		if(a[3]!='\n')
		    *x=-1;
	    }}
	else if(isalpha(a[1])){
	    *y=(a[1]>='a'&&a[1]<='z')?(a[1]-'a'):(a[1]-'A');
		if(a[2]!='\n')
		    *x=-1;
	}
    }
    else if(isalpha(a[0])){
	*y=(a[0]>='a'&&a[0]<='z')?(a[0]-'a'):(a[0]-'A');
	if(isdigit(a[1])){
	    *x=15-a[1]+'0';
	    if(isdigit(a[2])){
	        *x=15-(a[1]-'0')*10-a[2]+'0';
		if(a[3]!='\n')
		    *x=-1;}
	    else if(a[2]!='\n')
		*x=-1;}
	else if(a[1]==','||a[1]==' '){
	    if(isdigit(a[2])){
		*x=15-a[2]+'0';
		if(isdigit(a[3])){
	        *x=15-(a[2]-'0')*10-a[3]+'0';
		    if(a[4]!='\n')
		        *x=-1;}
		else if(a[3]!='\n')
		    *x=-1;}}
	else if(a[0]=='q'&&a[1]=='u'&&a[2]=='i'&&a[3]=='t'&&a[4]=='\n')
	    *x=-2;
    }
}

void initRecordBorard(void){
	int i,j;
	for(i=0;i<SIZE;i++)
	   for(j=0;j<SIZE;j++)
		aRecordBoard[i][j]=0;
}

void recordtoDisplayArray(int wf){
    int i,j;
    for(i=0;i<SIZE+1;i++)
	for(j=0;j<SIZE*CHARSIZE+3;j++)
	    aDisplayBoardArray[i][j]=aInitDisplayBoardArray[i][j];
    if(wf!=2){
	for(i=0;i<SIZE;i++)
	   for(j=0;j<SIZE;j++)
	if(aRecordBoard[i][j]==1){
	   aDisplayBoardArray[i][2*j+2]=play1Pic[0];
	   aDisplayBoardArray[i][2*j+3]=play1Pic[1];
	}else if(aRecordBoard[i][j]==2){
	   aDisplayBoardArray[i][2*j+2]=play2Pic[0];
	   aDisplayBoardArray[i][2*j+3]=play2Pic[1];
	}
    }
   if(wf==2){
	for(i=0;i<SIZE;i++)
	   for(j=0;j<SIZE;j++)
	if(aRecordBoard[i][j]==1){
	   aDisplayBoardArray[i][2*j+2]=play2Pic[0];
	   aDisplayBoardArray[i][2*j+3]=play2Pic[1];
	}else if(aRecordBoard[i][j]==2){
	   aDisplayBoardArray[i][2*j+2]=play1Pic[0];
	   aDisplayBoardArray[i][2*j+3]=play1Pic[1];
	}
    }
}

void displayBoard(void){
	system("clear");
	int i,j;
	for(i=0;i<SIZE+1;i++){
	   for(j=0;j<SIZE*CHARSIZE+3;j++){
		printf("%c",aDisplayBoardArray[i][j]);
	   }
	printf("\n");
	}
}

int judge(int x,int y){
    if(x>=0&&x<15&&y>=0&&y<15&&aRecordBoard[x][y]==0)
        return 1;
    else if(x==-2)
	return 2;
    else
	printf("输入错误!请重新输入\n");
	return 0;
}

int win(int x,int y){
    int a0[9],a1[9],a2[9],a3[9],i,flag=aRecordBoard[x][y];
    for(i=-4;i<5;i++){
	a0[i+4]=aRecordBoard[x][y+i];
	a1[i+4]=aRecordBoard[x+i][y];
	a2[i+4]=aRecordBoard[x+i][y+i];
	a3[i+4]=aRecordBoard[x-i][y+i];
    }
    if(mystrcm(a0,flag)||mystrcm(a1,flag)||mystrcm(a2,flag)||mystrcm(a3,flag))
	return 1;
    else
	return 0;
}

int mystrcm(int a[],int flag){
    int i=-1,count=0;
    while(count!=5&&i++<10){
      if(a[i]==flag)
        count++;
      else
	count=0;
    }
    if(count==5)
      return 1;
    else
      return 0;
}

void getchess(int *m,int *n,int aRecordBoard[15][15]){
    int s,t,c,h,i,score[15][15],b[225],k=0;
    for(i=0;i<225;i++)
	b[i]=0;
    for(s=0;s<15;s++)
	for(t=0;t<15;t++)
	    score[s][t]=0;
    for(s=0;s<15;s++)
	for(t=0;t<15;t++){
	    if(t<11)
		xscore(s,t,&score[0]);
	    if(s<11)
		yscore(s,t,score);
	    if(s>3&&t<11)
		upscore(s,t,&score[0]);
	    if(s<11&&t<11)
		downscore(s,t,&score[0]);
	}
for(s=0;s<15;s++)
    for(t=0;t<15;t++)
	if(aRecordBoard[s][t]!=0)
	    score[s][t]=-1;
for(s=0;s<15;s++){
    for(t=0;t<15;t++)
	printf("%d ",score[s][t]); printf("\n");
printf("\n");}
    for(s=0;s<15;s++)
	for(t=0;t<15;t++){
	    b[k]=score[s][t]; k++;
	}
    h=0;
    for(i=0;i<225;i++)
	if(b[i]>b[h])
	    h=i;
    s=h/15;
    t=h%15;
    *m=s,*n=t;
    aRecordBoard[s][t]=1;
}

void xscore(int x,int y,int score[15][15]){
    int i,a[5]={},b[5]={};
    for(i=0;i<5;i++)
	a[i]=aRecordBoard[x][y+i];
    if(add(a)==4)
	for(i=0;i<5;i++)
	    if(aRecordBoard[x][y+i]==0)
	        score[x][y+i]+=90000;
    if(dda(a)==8)
	for(i=0;i<5;i++)
	    if(aRecordBoard[x][y+i]==0)
	            score[x][y+i]+=10000;
    if(add(a)==3){
	for(i=0;i<5;i++)
	    if(aRecordBoard[x][y+i]==0)
	    score[x][y+i]+=72;
	for(i=0;i<2;i++)
	    if(strcm(a,*(type5+i)))
		score5[i](b);
    }
    if(dda(a)==6)
	for(i=0;i<5;i++)
	    if(aRecordBoard[x][y+i]==0)
	    score[x][y+i]+=64;
    if(add(a)==2)
	for(i=0;i<7;i++){
	    if(strcm(a,*(type2+i)))
		score2[i](b);
	}
    if(add(a)==1)
	for(i=0;i<4;i++){
	    if(strcm(a,*(type1+i)))
		score1[i](b);
	}
    if(dda(a)==4)
	for(i=0;i<7;i++){
	    if(strcm(a,*(type4+i)))
		score4[i](b);
	}
    if(dda(a)==2)
	for(i=0;i<2;i++){
	    if(strcm(a,*(type3+i)))
		score3[i](b);
	}
    for(i=0;i<5;i++)
	score[x][y+i]+=b[i];
}

void yscore(int x,int y,int score[15][15]){
    int i,a[5]={},b[5]={};
    for(i=0;i<5;i++)
	a[i]=aRecordBoard[x+i][y];
    if(add(a)==4)
	for(i=0;i<5;i++)
	    if(aRecordBoard[x+i][y]==0)
	        score[x+i][y]+=90000;
    if(dda(a)==8)
	for(i=0;i<5;i++)
	    if(aRecordBoard[x+i][y]==0)
	            score[x+i][y]+=10000;
    if(add(a)==3){
	for(i=0;i<5;i++)
	    if(aRecordBoard[x+i][y]==0)
	    score[x+i][y]+=72;
	for(i=0;i<2;i++)
	    if(strcm(a,*(type5+i)))
		score5[i](b);
    }
    if(dda(a)==6)
	for(i=0;i<5;i++)
	    if(aRecordBoard[x+i][y]==0)
	    score[x+i][y]+=64;
    if(add(a)==2)
	for(i=0;i<7;i++){
	    if(strcm(a,*(type2+i)))
		score2[i](b);
	}
    if(add(a)==1)
	for(i=0;i<4;i++){
	    if(strcm(a,*(type1+i)))
		score1[i](b);
	}
    if(dda(a)==4)
	for(i=0;i<7;i++){
	    if(strcm(a,*(type4+i)))
		score4[i](b);
	}
    if(dda(a)==2)
	for(i=0;i<2;i++){
	    if(strcm(a,*(type3+i)))
		score3[i](b);
	}
    for(i=0;i<5;i++)
	score[x+i][y]+=b[i];
}

void upscore(int x,int y,int score[15][15]){
    int i,a[5]={},b[5]={};
    for(i=0;i<5;i++)
	a[i]=aRecordBoard[x-i][y+i];
    if(add(a)==4)
	for(i=0;i<5;i++)
	    if(aRecordBoard[x-i][y+i]==0)
	        score[x-i][y+i]+=90000;
    if(dda(a)==8)
	for(i=0;i<5;i++)
	    if(aRecordBoard[x-i][y+i]==0)
	            score[x-i][y+i]+=10000;
    if(add(a)==3){
	for(i=0;i<5;i++)
	    if(aRecordBoard[x-i][y+i]==0)
	    score[x-i][y+i]+=72;
	for(i=0;i<2;i++)
	    if(strcm(a,*(type5+i)))
		score5[i](b);
    }
    if(dda(a)==6)
	for(i=0;i<5;i++)
	    if(aRecordBoard[x-i][y+i]==0)
	    score[x-i][y+i]+=64;
    if(add(a)==2)
	for(i=0;i<7;i++){
	    if(strcm(a,*(type2+i)))
		score2[i](b);
	}
    if(add(a)==1)
	for(i=0;i<4;i++){
	    if(strcm(a,*(type1+i)))
		score1[i](b);
	}
    if(dda(a)==4)
	for(i=0;i<7;i++){
	    if(strcm(a,*(type4+i)))
		score4[i](b);
	}
    if(dda(a)==2)
	for(i=0;i<2;i++){
	    if(strcm(a,*(type3+i)))
		score3[i](b);
	}
    for(i=0;i<5;i++)
	score[x-i][y+i]+=b[i];
}

void downscore(int x,int y,int score[15][15]){
    int i,a[5]={},b[5]={};
    for(i=0;i<5;i++)
	a[i]=aRecordBoard[x+i][y+i];
    if(add(a)==4)
	for(i=0;i<5;i++)
	    if(aRecordBoard[x+i][y+i]==0)
	        score[x+i][y+i]+=90000;
    if(dda(a)==8)
	for(i=0;i<5;i++)
	    if(aRecordBoard[x+i][y+i]==0)
	            score[x+i][y+i]+=10000;
    if(add(a)==3){
	for(i=0;i<5;i++)
	    if(aRecordBoard[x+i][y+i]==0)
	    score[x+i][y+i]+=72;
	for(i=0;i<2;i++)
	    if(strcm(a,*(type5+i)))
		score5[i](b);
    }
    if(dda(a)==6)
	for(i=0;i<5;i++)
	    if(aRecordBoard[x+i][y+i]==0)
	    score[x+i][y+i]+=64;
    if(add(a)==2)
	for(i=0;i<7;i++){
	    if(strcm(a,*(type2+i)))
		score2[i](b);
	}
    if(add(a)==1)
	for(i=0;i<4;i++){
	    if(strcm(a,*(type1+i)))
		score1[i](b);
	}
    if(dda(a)==4)
	for(i=0;i<7;i++){
	    if(strcm(a,*(type4+i)))
		score4[i](b);
	}
    if(dda(a)==2)
	for(i=0;i<2;i++){
	    if(strcm(a,*(type3+i)))
		score3[i](b);
	}
    for(i=0;i<5;i++)
	score[x+i][y+i]+=b[i];
}

int add(int a[]){
    int i,j,b=0;
    for(i=0;i<5;i++){
	if(a[i]!=2)
	    b+=a[i];
	else
	    b=-10;
    }
    return b>0?b:0;
}


int dda(int a[]){
    int i,j,b=0;
    for(i=0;i<5;i++){
	if(a[i]!=1)
	    b+=a[i];
	else
	    b=-10;
    }
    return b>0?b:0;
}

void score_grade10(int b[]){
    b[2]+=4;
}

void score_grade11(int b[]){
    b[1]+=4;
}

void score_grade12(int b[]){
    b[1]=2;
    b[2]=1;
}

void score_grade13(int b[]){
    b[2]=2;
    b[3]=1;
}

void score_grade20(int b[]){
    b[2]+=24;
    b[3]+=23;
    b[4]+=22;
}

void score_grade21(int b[]){
    b[0]+=22;
    b[3]+=36;
    b[4]+=22;
}

void score_grade22(int b[]){
    b[0]+=22;
    b[1]+=36;
    b[4]+=22;
}

void score_grade23(int b[]){
    b[0]+=22;
    b[1]+=23;
    b[2]+=24;
}

void score_grade24(int b[]){
    b[0]+=22;
    b[2]+=36;
    b[4]+=22;
}

void score_grade25(int b[]){
    b[1]+=23;
    b[2]+=24;
    b[4]+=22;
}

void score_grade26(int b[]){
    b[0]+=22;
    b[2]+=24;
    b[3]+=23;
}

void score_grade30(int b[]){
    b[2]+=3;
}

void score_grade31(int b[]){
    b[2]+=3;
}

void score_grade40(int b[]){
    b[2]+=18;
    b[3]+=17;
    b[4]+=16;
}

void score_grade41(int b[]){
    b[0]+=16;
    b[3]+=22;
    b[4]+=16;
}

void score_grade42(int b[]){
    b[0]+=16;
    b[1]+=22;
    b[4]+=16;
}

void score_grade43(int b[]){
    b[0]+=16;
    b[1]+=17;
    b[2]+=18;
}

void score_grade44(int b[]){
    b[0]+=16;
    b[2]+=22;
    b[4]+=16;
}

void score_grade45(int b[]){
    b[1]+=16;
    b[2]+=18;
    b[4]+=17;
}

void score_grade46(int b[]){
    b[0]+=17;
    b[2]+=18;
    b[3]+=16;
}

void score_grade50(int b[]){
    b[3]=5;
}

void score_grade51(int b[]){
    b[1]=5;
}

int strcm(int a[],char b[]){
    int i,n=0,c;
    for(i=0;i<5;i++)
	if(a[i]==(b[i]-'0'))
	    n++;
    if(n==5)
	c=1;
    else
	c=0;
    return c;
}


